
import json
import os
import datetime
from abc import ABC, abstractmethod


class DataStorage(ABC):


    @abstractmethod
    def load_data(self):
        pass

    @abstractmethod
    def save_data(self):
        pass


class JsonDataStorage(DataStorage):

    def __init__(self, filename):
        self._filename = filename
        self._data = {} 
        self.load_data() 

    def load_data(self):
        try:
            if os.path.exists(self._filename):
                with open(self._filename, 'r', encoding='utf-8') as f:
                    self._data = json.load(f)
                print(f"Данные успешно загружены из {self._filename}")
            else:
                self._data = {} 
                print(f"Файл {self._filename} не найден.  Создан новый.")
        except json.JSONDecodeError:
            print(f"Ошибка декодирования JSON в файле {self._filename}.  Данные могут быть повреждены.")
            self._data = {}  
        except Exception as e:
            print(f"Произошла ошибка при загрузке данных: {e}")
            self._data = {}

    def save_data(self):
       
        try:
            with open(self._filename, 'w', encoding='utf-8') as f:
                json.dump(self._data, f, indent=4, ensure_ascii=False)
            print(f"Данные успешно сохранены в {self._filename}")
        except Exception as e:
            print(f"Произошла ошибка при сохранении данных: {e}")

    def get_data(self, key):
        
        return self._data.get(key, [])

    def set_data(self, key, value):
        
        self._data[key] = value
        self.save_data()  


class Item(ABC):
  

    def __init__(self, item_id, title, price, description=""):
        self._item_id = item_id
        self._title = title
        self._price = price
        self._description = description

    @property
    def item_id(self):
        return self._item_id

    @property
    def title(self):
        return self._title

    @title.setter
    def title(self, new_title):
        if not isinstance(new_title, str):
            raise ValueError("Название должно быть строкой.")
        self._title = new_title

    @property
    def price(self):
        return self._price

    @price.setter
    def price(self, new_price):
        if not isinstance(new_price, (int, float)):
            raise ValueError("Цена должна быть числом.")
        if new_price < 0:
            raise ValueError("Цена не может быть отрицательной.")
        self._price = new_price

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, new_description):
        if not isinstance(new_description, str):
            raise ValueError("Описание должно быть строкой.")
        self._description = new_description

    @abstractmethod
    def display_details(self):
        
        pass

    def to_dict(self):
       
        return {
            "item_id": self.item_id,
            "title": self.title,
            "price": self.price,
            "description": self.description,
            "type": self.__class__.__name__  
        }


class Author:

    def __init__(self, author_id, name, biography=""):
        self._author_id = author_id
        self._name = name
        self._biography = biography

    @property
    def author_id(self):
        return self._author_id

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, new_name):
        if not isinstance(new_name, str):
            raise ValueError("Имя должно быть строкой.")
        self._name = new_name

    @property
    def biography(self):
        return self._biography

    @biography.setter
    def biography(self, new_biography):
        if not isinstance(new_biography, str):
            raise ValueError("Биография должна быть строкой.")
        self._biography = new_biography

    def to_dict(self):
        return {
            "author_id": self.author_id,
            "name": self.name,
            "biography": self.biography
        }


class Publisher:

    def __init__(self, publisher_id, name, location=""):
        self._publisher_id = publisher_id
        self._name = name
        self._location = location

    @property
    def publisher_id(self):
        return self._publisher_id

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, new_name):
        if not isinstance(new_name, str):
            raise ValueError("Имя должно быть строкой.")
        self._name = new_name

    @property
    def location(self):
        return self._location

    @location.setter
    def location(self, new_location):
        if not isinstance(new_location, str):
            raise ValueError("Местоположение должно быть строкой.")
        self._location = new_location

    def to_dict(self):
        return {
            "publisher_id": self.publisher_id,
            "name": self.name,
            "location": self.location
        }


class Music(Item):

    def __init__(self, item_id, title, price, author, genre, description=""):
        super().__init__(item_id, title, price, description)
        if not isinstance(author, Author):
            raise ValueError("Автор должен быть экземпляром класса Author.")

        self._author = author
        self._genre = genre

    @property
    def author(self):
        return self._author

    @author.setter
    def author(self, new_author):
        if not isinstance(new_author, Author):
            raise ValueError("Автор должен быть экземпляром класса Author.")
        self._author = new_author

    @property
    def genre(self):
        return self._genre

    @genre.setter
    def genre(self, new_genre):
        if not isinstance(new_genre, str):
            raise ValueError("Жанр должен быть строкой.")
        self._genre = new_genre

    def to_dict(self):
        base_dict = super().to_dict()
        base_dict.update({
            "author": self.author.to_dict(),
            "genre": self.genre
        })
        return base_dict


class Album(Music):

    def __init__(self, item_id, title, price, author, genre, track_count, publisher, description=""):
        super().__init__(item_id, title, price, author, genre, description)
        self._track_count = track_count

        if not isinstance(publisher, Publisher):
            raise ValueError("Издатель должен быть экземпляром класса Publisher.")

        self._publisher = publisher

    @property
    def track_count(self):
        return self._track_count

    @track_count.setter
    def track_count(self, new_track_count):
        if not isinstance(new_track_count, int):
            raise ValueError("Количество треков должно быть целым числом.")
        if new_track_count < 0:
            raise ValueError("Количество треков не может быть отрицательным.")
        self._track_count = new_track_count

    @property
    def publisher(self):
        return self._publisher

    @publisher.setter
    def publisher(self, new_publisher):
        if not isinstance(new_publisher, Publisher):
            raise ValueError("Издатель должен быть экземпляром класса Publisher.")
        self._publisher = new_publisher

    def display_details(self):
        return f"Альбом: {self.title} от {self.author.name} ({self.genre}) - {self.price}"

    def to_dict(self):
        base_dict = super().to_dict()
        base_dict.update({
            "track_count": self.track_count,
            "publisher": self.publisher.to_dict()
        })
        return base_dict


class Single(Music):

    def __init__(self, item_id, title, price, author, genre, duration, description=""):
        super().__init__(item_id, title, price, author, genre, description)
        self._duration = duration

    @property
    def duration(self):
        return self._duration

    @duration.setter
    def duration(self, new_duration):
        if not isinstance(new_duration, (int, float)):
            raise ValueError("Длительность должна быть числом.")
        if new_duration < 0:
            raise ValueError("Длительность не может быть отрицательной.")
        self._duration = new_duration

    def display_details(self):
        return f"Сингл: {self.title} от {self.author.name} ({self.genre}) - {self.price}"

    def to_dict(self):
        base_dict = super().to_dict()
        base_dict.update({
            "duration": self.duration
        })
        return base_dict


class User(ABC):  

    def __init__(self, user_id, username, password):
        self._user_id = user_id
        self._username = username
        self._password = password  
        self._role = "guest"  

    @property
    def user_id(self):
        return self._user_id

    @property
    def username(self):
        return self._username

    @property
    def role(self):
        return self._role

    @abstractmethod
    def display_profile(self):
        
        pass

    @abstractmethod
    def to_dict(self):
        
        pass

    @abstractmethod
    def perform_action(self, catalog, action, *args):
        
        pass


class Customer(User):
    

    def __init__(self, user_id, username, password):
        super().__init__(user_id, username, password)
        self._role = "customer"
        self._shopping_cart = []

    @property
    def shopping_cart(self):
        return self._shopping_cart

    def display_profile(self):
        print(f"Покупатель: {self.username} (ID: {self.user_id})")

    def add_to_cart(self, item):
        """Добавляет товар в корзину."""
        self.shopping_cart.append(item)
        print(f"{item.title} добавлен в корзину.")

    def view_cart(self):
        """Отображает товары в корзине."""
        if not self.shopping_cart:
            print("Ваша корзина пуста.")
            return
        print("--- Ваша корзина ---")
        for item in self.shopping_cart:
            print(item.display_details())

    def to_dict(self):
        return {
            "user_id": self.user_id,
            "username": self.username,
            "password": self._password,
            "role": self.role
        }

    def perform_action(self, catalog, action, *args):
        if action == "view_catalog":
            catalog.display_catalog()
        elif action == "view_cart":
            self.view_cart()
        elif action == "add_to_cart":
            item_id = args[0]
            item = catalog.get_item(item_id)
            if item:
                self.add_to_cart(item)
            else:
                print("Товар не найден.")
        else:
            print("Недопустимое действие.")


class Admin(User):
    

    def __init__(self, user_id, username, password):
        super().__init__(user_id, username, password)
        self._role = "admin"

    def display_profile(self):
        print(f"Администратор: {self.username} (ID: {self.user_id})")

    def add_item_to_catalog(self, catalog, item):
        
        catalog.add_item(item)
        print(f"Товар '{item.title}' добавлен в каталог администратором {self.username}.")

    def remove_item_from_catalog(self, catalog, item_id):
        
        catalog.remove_item(item_id)
        print(f"Товар '{item_id}' удален из каталога администратором {self.username}.")

    def to_dict(self):
        return {
            "user_id": self.user_id,
            "username": self.username,
            "password": self._password,
            "role": self.role
        }

    def perform_action(self, catalog, action, *args):
        if action == "view_catalog":
            catalog.display_catalog()
        elif action == "add_item":
            item = args[0]  
            self.add_item_to_catalog(catalog, item)
        elif action == "remove_item":
            item_id = args[0]
            self.remove_item_from_catalog(catalog, item_id)
        else:
            print("Недопустимое действие.")


class Authentication:

    def __init__(self, data_storage):
        self._data_storage = data_storage
        self._users = {}
        self.load_users()

    def register_user(self, user_id, username, password, role="customer"):
        if username in self._users:
            print("Имя пользователя уже существует.")
            return False

        if role == "customer":
            user = Customer(user_id, username, password)
        elif role == "admin":
            user = Admin(user_id, username, password)
        else:
            print("Недопустимая роль.")
            return False

        self._users[username] = user
        self.save_users()
        return True

    def login_user(self, username, password):
        
        user = self._users.get(username)
        if user and user._password == password:  
            print(f"Пользователь '{username}' успешно вошел как {user.role}.")
            return user
        else:
            print("Неверное имя пользователя или пароль.")
            return None

    def save_users(self):
    
        user_list = [user.to_dict() for user in self._users.values()]
        self._data_storage.set_data("users", user_list)

    def load_users(self):
        
        user_list = self._data_storage.get_data("users")
        if user_list:
            for user_data in user_list:
                if user_data["role"] == "customer":
                    user = Customer(user_data["user_id"], user_data["username"], user_data["password"])
                elif user_data["role"] == "admin":
                    user = Admin(user_data["user_id"], user_data["username"], user_data["password"])
                else:
                    print(f"Неизвестная роль при загрузке пользователя: {user_data}")
                    continue
                self._users[user_data["username"]] = user  

    @property
    def users(self):
        return self._users


class Catalog:

    def __init__(self, data_storage):
        self._data_storage = data_storage
        self._items = {}
        self.load_data()  

    def add_item(self, item):
        
        if not isinstance(item, Item):
            raise ValueError("Недопустимый тип товара.")
        self._items[item.item_id] = item
        self.save_data()  

    def remove_item(self, item_id):
        
        if item_id in self._items:
            del self._items[item_id]
            self.save_data() 
        else:
            print("Товар не найден в каталоге.")

    def get_item(self, item_id):
        
        return self._items.get(item_id)

    def display_catalog(self):
        
        print("\n--- Каталог товаров ---")
        if not self._items:
            print("Каталог пуст.")
            return
        for item_id, item in self._items.items():
            print(f"{item_id}: {item.display_details()}")

    def save_data(self):
        
        item_list = [item.to_dict() for item in self._items.values()]
        self._data_storage.set_data("catalog", item_list)

    def load_data(self):
        
        item_list = self._data_storage.get_data("catalog")
        if item_list:
            for item_data in item_list:
                item_type = item_data.get("type")
                if item_type == "Album":
                    
                    author_data = item_data.get("author")
                    publisher_data = item_data.get("publisher")

                    if author_data:
                        author = Author(author_data["author_id"], author_data["name"], author_data["biography"])
                    else:
                        print(f"Ошибка: Отсутствуют данные об авторе для альбома {item_data['title']}")
                        continue  

                    if publisher_data:
                        publisher = Publisher(publisher_data["publisher_id"], publisher_data["name"], publisher_data["location"])
                    else:
                        print(f"Ошибка: Отсутствуют данные об издателе для альбома {item_data['title']}")
                        continue  

                    item = Album(item_data["item_id"], item_data["title"], item_data["price"], author, item_data["genre"], item_data["track_count"], publisher, item_data["description"])
                elif item_type == "Single":
                    author_data = item_data.get("author")

                    if author_data:
                        author = Author(author_data["author_id"], author_data["name"], author_data["biography"])
                    else:
                        print(f"Ошибка: Отсутствуют данные об авторе для сингла {item_data['title']}")
                        continue  
                    item = Single(item_data["item_id"], item_data["title"], item_data["price"], author, item_data["genre"], item_data["duration"], item_data["description"])
                else:
                    print(f"Неизвестный тип товара при загрузке: {item_data}")
                    continue  
                self._items[item.item_id] = item

    def get_items(self):  
        """Возвращает все товары в каталоге."""
        return self._items


def main():
    """Основная функция для запуска приложения."""


    data_storage = JsonDataStorage("music_store_data.json")

    
    auth = Authentication(data_storage)

    
    catalog = Catalog(data_storage)

    def display_menu(user=None):
        """Отображает меню в зависимости от роли пользователя."""
        print("\n--- Меню музыкального магазина ---")
        if not user:
            print("1. Регистрация")
            print("2. Вход")
            print("3. Вход как администратор (пароль: 12345)") 
            print("4. Выход")
        elif user.role == "customer":
            print("1. Просмотр каталога")
            print("2. Просмотр корзины")
            print("3. Добавить в корзину (укажите ID товара)")
            print("4. Выход из системы")
            print("5. Выход из программы")
        elif user.role == "admin":
            print("1. Просмотр каталога")
            print("2. Добавить товар в каталог")
            print("3. Удалить товар из каталога (укажите ID)")
            print("4. Выход из системы")
            print("5. Выход из программы")

    def handle_user_action(choice, user=None):
        """Обрабатывает действия пользователя в зависимости от выбора в меню."""
        if not user:  
            if choice == "1":
                user_id = input("Введите ID пользователя: ")
                username = input("Введите имя пользователя: ")
                password = input("Введите пароль: ")
                if auth.register_user(user_id, username, password):
                    print("Регистрация прошла успешно!")
                else:
                    print("Регистрация не удалась.")
            elif choice == "2":
                username = input("Введите имя пользователя: ")
                password = input("Введите пароль: ")
                return auth.login_user(username, password)
            elif choice == "3":
                username = input("Введите имя пользователя: ")
                password = input("Введите пароль администратора: ")
                if password == "12345":
                    
                    if username not in auth.users:
                         
                        temp_admin = Admin("temp_admin", username, "12345")
                        auth._users[username] = temp_admin
                        print(f"ВНИМАНИЕ: Временная учетная запись администратора '{username}' создана (без сохранения)")

                    user = auth._users.get(username)

                    if user and user.role == "admin":
                        print(f"Администратор '{username}' успешно вошел.")
                        return user
                    else:
                        print("Ошибка: Пользователь с таким именем не является администратором, или учетные данные неверны.")
                        return None 
                else:
                    print("Неверный пароль администратора.")
                    return None
            elif choice == "4":
                return "exit"
            else:
                print("Неверный выбор.")
        elif user.role == "customer":
            if choice == "1":
                user.perform_action(catalog, "view_catalog") 
            elif choice == "2":
                user.perform_action(catalog, "view_cart")
            elif choice == "3":
                item_id = input("Введите ID товара для добавления в корзину: ")
                user.perform_action(catalog, "add_to_cart", item_id)
            elif choice == "4":
                return None  
            elif choice == "5":
                return "exit"
            else:
                print("Неверный выбор.")
        elif user.role == "admin":
            if choice == "1":
                user.perform_action(catalog, "view_catalog")
            elif choice == "2":
                item_id = input("Введите ID товара: ")
                title = input("Введите название: ")
                price = float(input("Введите цену: "))
                author_id = input("Введите ID автора: ")
                author_name = input("Введите имя автора: ")
                genre = input("Введите жанр: ")
                track_count = int(input("Введите количество треков: "))
                publisher_id = input("Введите ID издателя: ")
                publisher_name = input("Введите имя издателя: ")
                description = input("Введите описание: ")
                author = Author(author_id, author_name)
                publisher = Publisher(publisher_id, publisher_name)
                new_album = Album(item_id, title, price, author, genre, track_count, publisher, description)
                user.perform_action(catalog, "add_item", new_album)  
            elif choice == "3":
                item_id = input("Введите ID товара для удаления: ")
                user.perform_action(catalog, "remove_item", item_id)  
            elif choice == "4":
                return None  
            elif choice == "5":
                return "exit"
            else:
                print("Неверный выбор.")

        return user

    
    current_user = None
    while True:
        display_menu(current_user)
        choice = input("Введите ваш выбор: ")
        new_user = handle_user_action(choice, current_user)

        if new_user == "exit":
            break
        elif new_user is None:
            current_user = None 
        elif isinstance(new_user, User):
            current_user = new_user


if __name__ == "__main__":
    main()
